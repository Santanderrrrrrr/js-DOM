>>Promises take 2 parameters: 
    the resolve()
    the reject()

>>declaration of a new promise: 
    const newPromise = new Promise((resolve, reject)=>{
        if(condition){
            resolve()
        }else{
            reject()
        }
    })

>>Promises are then followed by a function that is met upon the promise
  fulfilment:
    <<declaration of promise>>
    promise.then(()=>{
        <<code to be run upon promise completion>>
    })

>>Promises also have a catch block that runs when a 
  promise is rejected
    <<declaration of promise>>
    promise.catch(()=>{
        <<code to be run upon promise rejection>>
    })

>>It's possible to chain .then and .catch together without having to
  declare the function name as follows:
    <<declaration of promise>>
    promise.then(()=>{
            <<code to be run upon promise completion>>
        })
        .catch(()=>{
            <<code to be run upon the promise rejection>>
        })

>>Axios requests and the likes are not promises. They're functions that
  return a promise that is either resolved or rejected.

>>Promises like in reality are not guaranteed to be resolved.
  What you get for sure is a "pending" notice. Thereafter, the results 
  you receive are entirely dependent on the state of the internet and the
  servers and clients in communication.
>>A promise as shown above is simply a function whose result is based on the
  environment it's in and is what is returned after a function request.

>>one can chain multiple promises by simply returning 
  a promise from the .then handling the resolved promise with a different request
   and then handling it in yet another .then with a catch placed as the final link in 
  the chain. This catch is called to action when either of the preceeding
  .then's fails!




